import React, { useState } from "react"
import sample from "./data/sample.json"

type Flashcard = { id: string; question: string; answer: string; tags: string[] }
type Cloze = { id: string; text: string; answer: string }
type MCQ = { id: string; question: string; options: string[]; answer: string; explanation: string }
type MiniCase = { id: string; scenario: string; question: string; solution_steps: string[] }

type Data = {
  flashcards: Flashcard[]
  cloze: Cloze[]
  mcq: MCQ[]
  mini_cases: MiniCase[]
}

// ✅ Only one definition of emptyData
const emptyData: Data = {
  flashcards: Array.isArray(sample.flashcards) ? sample.flashcards : [],
  cloze: Array.isArray(sample.cloze) ? sample.cloze : [],
  mcq: Array.isArray(sample.mcq) ? sample.mcq : [],
  mini_cases: Array.isArray(sample.mini_cases) ? sample.mini_cases : []
}

function Section({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <section className="card">
      <div className="card-body">
        <h2 className="text-xl font-semibold">{title}</h2>
        <div className="mt-4">{children}</div>
      </div>
    </section>
  )
}

export default function App() {
  const [raw, setRaw] = useState<string>(JSON.stringify(emptyData, null, 2))
  const [data, setData] = useState<Data>(emptyData)
  const [error, setError] = useState<string>("")
  const [mode, setMode] = useState<"flashcards" | "cloze" | "mcq" | "cases">("flashcards")

  function load() {
    try {
      const parsed = JSON.parse(raw)
      setData({
        flashcards: Array.isArray(parsed.flashcards) ? parsed.flashcards : [],
        cloze: Array.isArray(parsed.cloze) ? parsed.cloze : [],
        mcq: Array.isArray(parsed.mcq) ? parsed.mcq : [],
        mini_cases: Array.isArray(parsed.mini_cases) ? parsed.mini_cases : []
      })
      setError("")
    } catch (e: any) {
      console.error(e)
      setError("Invalid JSON: " + e.message)
    }
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <header>
        <p className="kicker">EMBA • Strategic Thinking</p>
        <h1 className="text-3xl font-bold">Interactive Study Coach</h1>
        <p className="text-gray-600">Paste JSON generated by the master prompt → practice flashcards, cloze, MCQ, and case Q&A.</p>
      </header>

      {/* Loader */}
      <Section title="Load JSON">
        <textarea
          className="textarea h-48 font-mono text-sm"
          value={raw}
          onChange={(e) => setRaw(e.target.value)}
        />
        <div className="mt-3 flex gap-2">
          <button className="btn btn-primary" onClick={load}>Load</button>
          {error && <p className="text-sm text-red-600">{error}</p>}
        </div>
      </Section>

      {/* Mode Selector */}
      <div className="flex gap-2">
        {(["flashcards", "cloze", "mcq", "cases"] as const).map((m) => (
          <button
            key={m}
            className={`btn ${mode === m ? "btn-primary" : ""}`}
            onClick={() => setMode(m)}
          >
            {m.toUpperCase()}
          </button>
        ))}
      </div>

      {/* Content */}
      {mode === "flashcards" && <FlashcardView cards={data.flashcards} />}
      {mode === "cloze" && <ClozeView cards={data.cloze} />}
      {mode === "mcq" && <MCQView cards={data.mcq} />}
      {mode === "cases" && <CaseView cases={data.mini_cases} />}
    </div>
  )
}
