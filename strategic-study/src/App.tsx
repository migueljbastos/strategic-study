import React, { useEffect, useMemo, useState } from 'react'
import sample from './data/sample.json'

type Concept = { term: string, definition: string, related_frameworks: string[] }
type FrameworkLink = { framework: string, applies_when: string, red_flags: string }
type Example = { title: string, setup: string, application: string, pitfall: string }
type Flashcard = { id: string, type: 'basic' | 'cloze' | 'framework', question: string, answer: string, tags: string[], difficulty: number }
type ExamQ = { type: 'short' | 'mini_case' | 'diagram', prompt: string, expected_points: string[] }
type PlanItem = { date: string, focus: string, est_minutes: number }
type SiteBlock = { hero: { headline: string, subhead: string }, sections: { title: string, bullets: string[] }[] }

type Data = {
  tldr: string
  takeaways: string[]
  concepts: Concept[]
  framework_links: FrameworkLink[]
  examples: Example[]
  flashcards: Flashcard[]
  exam_questions: ExamQ[]
  spaced_plan: PlanItem[]
  site_blocks: SiteBlock
}

const emptyData: Data = sample as Data

function useStoredJson(key: string, initial: string) {
  const [value, setValue] = useState<string>(() => localStorage.getItem(key) ?? initial)
  useEffect(() => { localStorage.setItem(key, value) }, [key, value])
  return [value, setValue] as const
}

function Section({ title, children }:{title:string, children: React.ReactNode}){
  return (
    <section className="card">
      <div className="card-body">
        <h2 className="text-xl font-semibold">{title}</h2>
        <div className="mt-4">{children}</div>
      </div>
    </section>
  )
}

function Badge({ children }:{children: React.ReactNode}){
  return <span className="px-2.5 py-1 rounded-full text-xs bg-gray-100 border border-gray-200">{children}</span>
}

export default function App(){
  const [raw, setRaw] = useStoredJson('sss.raw', JSON.stringify(emptyData, null, 2))
  const [data, setData] = useState<Data>(emptyData)
  const [error, setError] = useState<string>('')
  const [cardType, setCardType] = useState<'all'|'basic'|'cloze'|'framework'>('all')
  const [index, setIndex] = useState<number>(0)
  const [reveal, setReveal] = useState<boolean>(false)

  const cards = useMemo(() => {
    const list = data.flashcards || []
    return cardType === 'all' ? list : list.filter(c => c.type === cardType)
  }, [data, cardType])

  useEffect(() => {
    setIndex(0)
    setReveal(false)
  }, [cards.length, cardType])

  function load(){
    try{
      const parsed = JSON.parse(raw)
      // lightweight shape check
      if(!parsed || typeof parsed !== 'object' || !('flashcards' in parsed)){
        throw new Error('JSON missing required keys (e.g., flashcards). Paste the block from the prompt output.')
      }
      setData(parsed as Data)
      setError('')
    }catch(e:any){
      setError(e.message)
    }
  }

  function handleFile(e: React.ChangeEvent<HTMLInputElement>){
    const file = e.target.files?.[0]
    if(!file) return
    const reader = new FileReader()
    reader.onload = () => setRaw(String(reader.result))
    reader.readAsText(file)
  }

  const current = cards[index]

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <header className="flex items-center justify-between">
        <div>
          <p className="kicker">EMBA • Strategic Thinking</p>
          <h1 className="text-3xl font-bold tracking-tight">Study Synthesizer</h1>
          <p className="text-gray-600">Paste the JSON generated by your master prompt to get flashcards, takeaways, and a plan.</p>
        </div>
        <div className="flex items-center gap-2">
          <a href="https://vitejs.dev" target="_blank" className="btn btn-ghost">Vite</a>
          <a href="https://tailwindcss.com" target="_blank" className="btn btn-ghost">Tailwind</a>
        </div>
      </header>

      <div className="grid md:grid-cols-2 gap-6">
        <section className="card">
          <div className="card-body">
            <h2 className="text-xl font-semibold">Load JSON</h2>
            <p className="text-sm text-gray-600">Paste your JSON or import a file. Your last paste is saved locally.</p>
            <div className="mt-3 flex items-center gap-2">
              <input type="file" accept="application/json" onChange={handleFile} className="hidden" id="file" />
              <label htmlFor="file" className="btn">Import .json</label>
              <button className="btn btn-primary" onClick={load}>Load</button>
            </div>
            {error && <p className="mt-3 text-sm text-red-600">{error}</p>}
            <textarea className="textarea h-56 mt-4 font-mono text-sm" value={raw} onChange={e=>setRaw(e.target.value)} />
          </div>
        </section>

        <Section title="Hero">
          <div className="space-y-1">
            <h2 className="text-2xl font-bold">{data.site_blocks?.hero?.headline}</h2>
            <p className="text-gray-600">{data.site_blocks?.hero?.subhead}</p>
          </div>
          <div className="mt-4 flex flex-wrap gap-3">
            {data.site_blocks?.sections?.map((s,i)=>(
              <div key={i} className="card w-full">
                <div className="card-body">
                  <h3 className="font-semibold">{s.title}</h3>
                  <ul className="mt-2 list-disc list-inside text-sm text-gray-700">
                    {s.bullets.map((b,bi)=>(<li key={bi}>{b}</li>))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </Section>
      </div>

      <div className="grid md:grid-cols-3 gap-6">
        <Section title="TL;DR">
          <p className="text-gray-800">{data.tldr}</p>
        </Section>

        <Section title="Key Takeaways">
          <ol className="list-decimal list-inside space-y-1 text-gray-800">
            {data.takeaways?.map((t,i)=>(<li key={i}>{t}</li>))}
          </ol>
        </Section>

        <Section title="Concepts">
          <div className="space-y-2">
            {data.concepts?.map((c,i)=>(
              <div key={i} className="flex items-start gap-2">
                <Badge>{c.term}</Badge>
                <div>
                  <p className="text-sm text-gray-800">{c.definition}</p>
                  <p className="text-xs text-gray-500 mt-0.5">{c.related_frameworks?.join(' • ')}</p>
                </div>
              </div>
            ))}
          </div>
        </Section>
      </div>

      <Section title="Flashcards">
        <div className="flex items-center justify-between gap-3 flex-wrap">
          <div className="flex items-center gap-2">
            {(['all','basic','cloze','framework'] as const).map(t => (
              <button key={t} onClick={()=>setCardType(t)} className={`btn ${cardType===t?'btn-primary':''}`}>
                {t}
              </button>
            ))}
            <span className="text-sm text-gray-500">({cards.length} cards)</span>
          </div>
          <div className="text-sm text-gray-500">Use the buttons or press ← →</div>
        </div>
        {cards.length === 0 ? (
          <p className="mt-4 text-gray-600">No cards loaded.</p>
        ) : (
          <div className="mt-4">
            <div className="card">
              <div className="card-body">
                <div className="flex items-center justify-between">
                  <div className="text-xs text-gray-500">Card {index+1} / {cards.length}</div>
                  <div className="flex gap-2">
                    {current.tags?.map((t,i)=>(<Badge key={i}>{t}</Badge>))}
                    <Badge>★{current.difficulty}</Badge>
                  </div>
                </div>
                <h3 className="text-lg font-semibold mt-2">{current.type.toUpperCase()} — Question</h3>
                <p className="mt-1 text-gray-800">{current.question}</p>
                {reveal && (
                  <>
                    <h4 className="text-sm font-semibold mt-4">Answer</h4>
                    <p className="text-gray-800">{current.answer}</p>
                  </>
                )}
                <div className="mt-4 flex items-center gap-2">
                  <button className="btn" onClick={()=>setReveal(r=>!r)}>{reveal?'Hide':'Reveal'}</button>
                  <div className="flex-1"></div>
                  <button className="btn" onClick={()=>setIndex(i=>Math.max(0,i-1))}>Prev</button>
                  <button className="btn" onClick={()=>setIndex(i=>Math.min(cards.length-1,i+1))}>Next</button>
                </div>
              </div>
            </div>
          </div>
        )}
      </Section>

      <div className="grid md:grid-cols-2 gap-6">
        <Section title="Exam-Style Questions">
          <ol className="list-decimal list-inside space-y-2">
            {data.exam_questions?.map((q,i)=>(
              <li key={i}>
                <span className="font-medium">{q.type.toUpperCase()}:</span> {q.prompt}
              </li>
            ))}
          </ol>
        </Section>

        <Section title="Spaced Plan">
          <ul className="space-y-2">
            {data.spaced_plan?.map((p,i)=>(
              <li key={i} className="flex items-center justify-between">
                <span>{p.date}</span>
                <span className="text-gray-700">{p.focus}</span>
                <Badge>{p.est_minutes} min</Badge>
              </li>
            ))}
          </ul>
        </Section>
      </div>

      <footer className="py-8 text-center text-sm text-gray-500">
        Paste JSON from your master prompt to replace the sample data. Built with React + Tailwind.
      </footer>
    </div>
  )
}
